{"version":3,"sources":["hooks/UseCharacters.jsx","pages/CharactersList.jsx","hooks/UseCharacter.jsx","pages/Character.jsx","pages/Search.jsx","App.js","reportWebVitals.js","index.js"],"names":["GET_CHARACTERS","gql","_templateObject","_taggedTemplateLiteral","UseCharacters","_useQuery","useQuery","error","data","loading","CharactersList","_UseCharacters","React","createElement","className","Link","to","characters","results","map","character","concat","id","src","image","alt","name","UseCharacter","variables","useParams","_UseCharacter","console","log","width","height","gender","episode","GET_CHARACTERS_LOCATIONS","Search","_useState","useState","_useState2","_slicedToArray","setName","_useLazyQuery","useLazyQuery","_useLazyQuery2","getLocations","_useLazyQuery2$","value","onChange","e","target","onClick","location","App","Routes","Route","strict","exact","path","element","Character","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","createRoot","document","getElementById","render","StrictMode","BrowserRouter","ApolloProvider"],"mappings":"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","file":"static/js/main.fff786fb.chunk.js","sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\r\n\r\nconst GET_CHARACTERS = gql`\r\n  query {\r\n    characters {\r\n      results {\r\n        id\r\n        name\r\n        image\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction UseCharacters() {\r\n  const { error, data, loading } = useQuery(GET_CHARACTERS);\r\n\r\n  return {\r\n    error,\r\n    data,\r\n    loading,\r\n  };\r\n}\r\n\r\nexport default UseCharacters;\r\n","import React from \"react\";\r\nimport UseCharacters from \"../hooks/UseCharacters\";\r\nimport \"./CharactersList.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function CharactersList() {\r\n  const { error, data, loading } = UseCharacters();\r\n\r\n  if (loading) {\r\n    return <div>Spinner....</div>;\r\n  } else if (error) {\r\n    return <div>Somethings Wrong</div>;\r\n  } else {\r\n    return (\r\n      <div className=\"characterList\">\r\n        <div className=\"characterList-header\">\r\n          <Link to=\"/\">Home</Link>\r\n          <Link to=\"/search\">Search</Link>\r\n        </div>\r\n        <div className=\"characterList-row\">\r\n          {data.characters.results.map((character) => {\r\n            return (\r\n              <Link to={`/${character.id}`}>\r\n                <img src={character.image} alt={character.name} />\r\n                <h2>{character.name}</h2>\r\n              </Link>\r\n            );\r\n          })}\r\n          )\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useQuery, gql } from \"@apollo/client\";\r\n\r\nconst GET_CHARACTERS = gql`\r\n  query GetCharacter($id: ID!) {\r\n    character(id: $id) {\r\n      name\r\n      id\r\n      image\r\n      episode {\r\n        name\r\n        episode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction UseCharacter(id) {\r\n  const { error, data, loading } = useQuery(GET_CHARACTERS, {\r\n    variables: {\r\n      id,\r\n    },\r\n  });\r\n\r\n  return {\r\n    error,\r\n    data,\r\n    loading,\r\n  };\r\n}\r\n\r\nexport default UseCharacter;\r\n","import React from \"react\";\r\nimport UseCharacter from \"../hooks/UseCharacter\";\r\nimport \"./Character.css\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function CharactersList() {\r\n  const { id } = useParams();\r\n  const { error, data, loading } = UseCharacter(id);\r\n  console.log(\"loading:\", loading)\r\n  console.log(\"data:\", data)\r\n  console.log(\"error:\", error)\r\n\r\n  if (loading) {\r\n    return <div>Spinner....</div>;\r\n  } else if (error) {\r\n    return <div>Somethings Wrong Test</div>;\r\n  } else {\r\n    return (\r\n      <div className=\"characterList\">\r\n        <div className=\"character\">\r\n          <img\r\n            src={data.character.image}\r\n            alt={data.character.name}\r\n            width={750}\r\n            height={750}\r\n          />\r\n          <div className=\"characterContent\">\r\n            <h1>{data.character.name}</h1>\r\n            <p>{data.character.gender}</p>\r\n            <div className=\"characterEpisode\">\r\n              {data.character.episode.map((episode) => {\r\n                return (\r\n                  <div>\r\n                    {episode.name} - <b>{episode.episode}</b>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { gql, useLazyQuery } from \"@apollo/client\";\r\nimport \"./Search.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst GET_CHARACTERS_LOCATIONS = gql`\r\n  query GetCharacterLocations($name: String!) {\r\n    characters(filter: { name: $name }) {\r\n      results {\r\n        location {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Search() {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const [getLocations, { loading, error, data }] = useLazyQuery(\r\n    GET_CHARACTERS_LOCATIONS,\r\n    {\r\n      variables: {\r\n        name,\r\n      },\r\n    }\r\n  );\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <div className=\"search-header\">\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/search\">Search</Link>\r\n      </div>\r\n\r\n      <div className=\"search-area\">\r\n        <input value={name} onChange={(e) => setName(e.target.value)} />\r\n        <button onClick={() => getLocations()}>Search</button>\r\n      </div>\r\n      {loading && <div>Spinner....</div>}\r\n      {error && <div>Error....</div>}\r\n      {data && (\r\n        <ul>\r\n          {data.characters.results.map((character) => {\r\n            return <li>{character.location.name}</li>;\r\n          })}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport CharactersList from \"./pages/CharactersList\";\nimport Character from \"./pages/Character\";\nimport Search from \"./pages/Search\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes>\n        <Route strict exact path=\"/\" element={<CharactersList />} />\n        <Route strict exact path=\"/search\" element={<Search />} />\n        <Route strict exact path=\"/:id\" element={<Character />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\",\n  cache: new InMemoryCache(),\n});\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}